# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/178tjZKpQmaJhqVWQxNh1QsC3JwIoLPyu
"""

from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error

def call_ridge(x_train, x_test, y_train, y_test):
    from sklearn.linear_model import Ridge
    from sklearn.model_selection import GridSearchCV
    param = {'alpha': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]}
    model = Ridge()
    grid = GridSearchCV(model, param_grid=param, cv=5, scoring='neg_mean_squared_error')
    grid.fit(x_train, y_train)
    best_model = grid.best_estimator_
    print('Best alpha:', grid.best_params_['alpha'])
    y_pred = best_model.predict(x_test)
    mse = mean_squared_error(y_test, y_pred)
    print('Test MSE:', mse)

    return y_pred , grid.best_estimator_

def call_lasso(x_train, x_test, y_train, y_test):
    from sklearn.linear_model import Lasso
    from sklearn.model_selection import GridSearchCV
    from sklearn.metrics import mean_squared_error

    param = {'alpha': [0.0001, 0.001, 0.01, 0.1, 0.5, 1.0]}
    model = Lasso(max_iter=10000)
    grid = GridSearchCV(model, param_grid=param, cv=5, scoring='neg_mean_squared_error')
    grid.fit(x_train, y_train)

    best_model = grid.best_estimator_
    print('Best alpha (Lasso):', grid.best_params_['alpha'])

    y_pred = best_model.predict(x_test)
    mse = mean_squared_error(y_test, y_pred)
    print('MSE', mse)

    return y_pred, best_model

def call_sgd_lasso(x_train, x_test, y_train, y_test):
    from sklearn.linear_model import SGDRegressor
    from sklearn.model_selection import GridSearchCV
    from sklearn.metrics import mean_squared_error


    param = {'alpha': [0.0001, 0.001, 0.01, 0.1, 0.5, 1.0]}
    model = SGDRegressor(penalty='l1', max_iter=1000, tol=1e-3, random_state=42)
    grid = GridSearchCV(model, param_grid=param, cv=5, scoring='neg_mean_squared_error')
    grid.fit(x_train, y_train)

    best_model = grid.best_estimator_
    print('Best alpha (SGD Lasso):', grid.best_params_['alpha'])

    y_pred = best_model.predict(x_test)
    mse = mean_squared_error(y_test, y_pred)
    print('Test MSE (SGD Lasso):', mse)

    return y_pred, best_model

def call_xgboost_regressor(x_train, x_test, y_train, y_test):
    from xgboost import XGBRegressor
    from sklearn.model_selection import GridSearchCV
    from sklearn.metrics import mean_squared_error

    param = {
        'n_estimators': [50, 100, 150],
        'max_depth': [3, 5, 7],
        'learning_rate': [0.01, 0.1, 0.2,0.3]
    }

    model = XGBRegressor(random_state=42, objective='reg:squarederror')
    grid = GridSearchCV(model, param_grid=param, cv=5, scoring='neg_mean_squared_error', verbose=0)
    grid.fit(x_train, y_train)

    best_model = grid.best_estimator_
    print('Best parameters (XGBoost):', grid.best_params_)

    y_pred = best_model.predict(x_test)
    mse = mean_squared_error(y_test, y_pred)
    print('Test MSE (XGBoost):', mse)

    return y_pred, best_model