# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y1WWBF-8Dl0UtUCFuJNdzgOMRtw9pjNl
"""

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV

df = pd.read_csv("car_encoded.csv")
df.head()

X = df.drop(columns=["Survived"], axis=1)
y = df["Survived"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)
print("X_train shape -- ", X_train.shape)
print("y_train shape -- ", y_train.shape)
print("X_test shape -- ", X_test.shape)
print("y_test shape -- ", y_test.shape)

from sklearn.impute import SimpleImputer

# Impute with mean
imputer = SimpleImputer(strategy='mean')

X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

def train_rf_model(X_train, y_train, X_test,y_test):
    from sklearn.ensemble import RandomForestClassifier

    # Define hyperparameter grid
    param_grid = {
        'n_estimators': [100, 200],
        'criterion': ['gini', 'entropy'],
        'max_depth': [None, 5, 10],
        'min_samples_split': [2, 5],
        'min_samples_leaf': [1, 2],
        'max_features': ['sqrt', 'log2', None]
    }


    # Grid search with 5-fold cross-validation
    grid_search = GridSearchCV(
        estimator=RandomForestClassifier(random_state=42),
        param_grid=param_grid,
        cv=5,
        scoring='accuracy',
        n_jobs=-1,
        verbose=0
    )

    # Fit on training data
    grid_search.fit(X_train, y_train)
    best_model = grid_search.best_estimator_

    # Train best model on full training data
    best_model.fit(X_train, y_train)

    # Predict on test data
    y_pred = best_model.predict(X_test)
    

    return y_pred, y_test

# y_pred, y_true = train_rf_model(X_train, y_train, X_test,y_test)
# print("Predictions:", y_pred)
# print("True Labels:", y_true.to_numpy())

def train_lr_model(X_train, y_train, X_test, y_test):
    from sklearn.linear_model import LogisticRegression

    # Define hyperparameter grid
    param_grid = {
        'penalty': ['l1', 'l2', 'elasticnet'],
        'solver': ['saga'],  # saga supports all penalty types
        'C': [0.01, 0.1, 1, 10],
        'l1_ratio': [0.0, 0.5, 1.0]  # used only when penalty = 'elasticnet'
    }

    # Grid search with 5-fold cross-validation
    grid_search = GridSearchCV(
        estimator=LogisticRegression(max_iter=1000, random_state=42),
        param_grid=param_grid,
        cv=5,
        scoring='accuracy',
        n_jobs=-1,
        verbose=0
    )

    # Fit on training data
    grid_search.fit(X_train, y_train)
    best_model = grid_search.best_estimator_

    # Train best model on full training data
    best_model.fit(X_train, y_train)

    # Predict on test data
    y_pred = best_model.predict(X_test)

    return y_pred, y_test

# y_pred, y_true = train_lr_model(X_train, y_train, X_test, y_test)
# print("Predictions:", y_pred)
# print("True Labels:", y_true.to_numpy())

def train_SGD_model(X_train, y_train, X_test, y_test):
    from sklearn.linear_model import SGDClassifier

    # Define hyperparameter grid
    param_grid = {
        'penalty': ['l2', 'l1', 'elasticnet'],
        'loss': ['log_loss'],
        'alpha': [0.0001, 0.001, 0.01],
        'learning_rate': ['optimal', 'invscaling', 'constant', 'adaptive'],
        'eta0': [0.01, 0.1],
        'l1_ratio': [0.0, 0.5, 1.0]
    }


    # Grid search with 5-fold cross-validation
    grid_search = GridSearchCV(
        estimator=SGDClassifier(max_iter=1000,random_state=42),
        param_grid=param_grid,
        cv=5,
        scoring='accuracy',
        n_jobs=-1,
        verbose=0
    )

    # Fit on training data
    grid_search.fit(X_train, y_train)
    best_model = grid_search.best_estimator_

    # Train best model on full training data
    best_model.fit(X_train, y_train)

    # Predict on test data
    y_pred = best_model.predict(X_test)

    return y_pred, y_test

# y_pred, y_true = train_lr_model(X_train, y_train, X_test, y_test)
# print("Predictions:", y_pred)
# print("True Labels:", y_true.to_numpy())

def train_SVM_model(X_train, y_train, X_test, y_test):
    from sklearn.svm import SVC

    # Define hyperparameter grid
    param_grid = {
        'C': [0.1, 1, 10, 100],
        'kernel': ['linear', 'rbf'],
        'gamma': ['scale', 'auto', 0.01, 0.001],
    }

    # Grid search with 5-fold cross-validation
    grid_search = GridSearchCV(
        estimator=SVC(),
        param_grid=param_grid,
        cv=5,
        scoring='accuracy',
        n_jobs=-1,
        verbose=0
    )

    # Fit on training data
    grid_search.fit(X_train, y_train)
    best_model = grid_search.best_estimator_

    # Train best model on full training data
    best_model.fit(X_train, y_train)

    # Predict on test data
    y_pred = best_model.predict(X_test)

    return y_pred, y_test

# y_pred, y_true = train_lr_model(X_train, y_train, X_test, y_test)
# print("Predictions:", y_pred)
# print("True Labels:", y_true.to_numpy())

def train_DT_model(X_train, y_train, X_test, y_test):
    from sklearn.tree import DecisionTreeClassifier

    # Define hyperparameter grid
    param_grid = {
        'criterion': ['gini', 'entropy'],
        'max_depth': [None, 3, 5, 10, 20],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4],
        'max_features': [None, 'sqrt', 'log2'],
    }

    # Grid search with 5-fold cross-validation
    grid_search = GridSearchCV(
        estimator=DecisionTreeClassifier(random_state=42),
        param_grid=param_grid,
        cv=5,
        scoring='accuracy',
        n_jobs=-1,
        verbose=0
    )

    # Fit on training data
    grid_search.fit(X_train, y_train)
    best_model = grid_search.best_estimator_

    # Train best model on full training data
    best_model.fit(X_train, y_train)

    # Predict on test data
    y_pred = best_model.predict(X_test)

    return y_pred, y_test

# y_pred, y_true = train_lr_model(X_train, y_train, X_test, y_test)
# print("Predictions:", y_pred)
# print("True Labels:", y_true.to_numpy())

def train_KNN_model(X_train, y_train, X_test, y_test):
    from sklearn.neighbors import KNeighborsClassifier
    # Define valid hyperparameter grid for KNN
    param_grid = {
        'n_neighbors': [3, 5, 7, 9, 11],
        'weights': ['uniform', 'distance'],
        'metric': ['euclidean', 'manhattan']
    }

    # Grid search with 5-fold cross-validation
    grid_search = GridSearchCV(
        estimator=KNeighborsClassifier(),
        param_grid=param_grid,
        cv=5,
        scoring='accuracy',
        n_jobs=-1,
        verbose=0
    )

    # Fit on training data
    grid_search.fit(X_train, y_train)
    best_model = grid_search.best_estimator_

    # Train best model on full training data
    best_model.fit(X_train, y_train)

    # Predict on test data
    y_pred = best_model.predict(X_test)

    return y_pred, y_test

# y_pred, y_true = train_KNN_model(X_train, y_train, X_test, y_test)
# print("Predictions:", y_pred)
# print("True Labels:", y_true.to_numpy())

def train_NN_model(X_train, y_train, X_test, y_test):
    from sklearn.neural_network import MLPClassifier
    # Define valid hyperparameter grid for KNN
    param_grid = {
        'hidden_layer_sizes': [(50,), (100,), (100, 50), (50, 50)],
        'activation': ['relu', 'tanh', 'logistic'],
        'solver': ['adam', 'sgd'],
        'alpha': [0.0001, 0.001, 0.01],
        'learning_rate': ['constant', 'adaptive'],
        'max_iter': [300]
    }

    # Grid search with 5-fold cross-validation
    grid_search = GridSearchCV(
        estimator=MLPClassifier(),
        param_grid=param_grid,
        cv=5,
        scoring='accuracy',
        n_jobs=-1,
        verbose=0
    )

    # Fit on training data
    grid_search.fit(X_train, y_train)
    best_model = grid_search.best_estimator_

    # Train best model on full training data
    best_model.fit(X_train, y_train)

    # Predict on test data
    y_pred = best_model.predict(X_test)

    return y_pred, y_test

# y_pred, y_true = train_KNN_model(X_train, y_train, X_test, y_test)
# print("Predictions:", y_pred)
# print("True Labels:", y_true.to_numpy())